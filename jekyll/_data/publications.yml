# Papers
# Keep this list in chronological order, with most recent at the top
#
# A paper entry should have the following type:
# - title: string
#   type: 'conference' | 'workshop' | 'journal'
#   slug: string, match files names associated with this paper
#         files/publications/<slug>.bib -> Bibtex file
#         files/publications/<slug>.pdf -> Official paper (published version)
#         files/publications/<slug>-with-appendices.pdf -> Extended version
#         files/publications/<slug>-slides.pdf -> Slides
#         research/<slug>.md -> Summary
#   authors: list of 'author_id: affiliation'
#     - author_id must match a key in _data/authors.yml
#     - Affiliation is either a string or a list of strings
#   doi: the DOI string, format '10.nnnn/mmmmmmmmmm'
#   venue:
#     fullname: string - Full name, including number
#     acronym: string - ex PLDI
#     url: string - the website
#     location: langstring
#   ranking: conference ranking: A*, A, B...
#   date:
#     submitted: date
#     accepted: date - Used to generate news
#     published: required date - Official date for the paper - used to generate year and month attributes
#   artifact: string - url to artifact
#   artifact-badges: list of keys in _data/badges.yml
#   talk-video: url to a video
#   talk-video-length: int - video length in minutes
#   keywords: list of langstring
#   abstract: langstring
#   award: list of {name: langstring, url: optional string}

# PLDI 2025
- title: Relational Abstractions Based on Labeled Union-Find
  type: conference
  slug: 2025-pldi-relational-abstractions-labeled-uf
  authors:
    - dlesbre: Université Paris-Saclay, CEA List
    - mlemerre: Université Paris-Saclay, CEA List
    - haitelhara: [OCamlPro, "Université Paris-Saclay, CEA List"]
    - fbobot: Université Paris-Saclay, CEA List
  venue:
    fullname: 46th ACM-SIGPLAN Symposium on Programming Language Design and Implementation
    acronym: PLDI
    url: https://pldi25.sigplan.org/
    location:
      en: Seoul, South Korea
      fr: Séoul, Corée du Sud
    attending: true
  ranking: A*
  award: null
  doi: 10.1145/3729298
  date:
    submitted: 2024-11-15
    accepted: 2025-03-06
    published: 2025-06-16
  artifact: https://zenodo.org/records/15261356
  artifact-badges:
    - acm-available
    - acm-reusable
  talk-video: https://www.youtube.com/live/HQ29o1EWOO4?t=23045
  talk-video-length: 21
  keywords:
    - en: relational abstract domain
      fr: domaine abstrait relationel
    - labeled union-find
    - en: abstract interpretation
      fr: interprétation abstraite
  abstract:
    en:
      We introduce a new family of abstractions based on a data structure that we
      call <i>labeled union-find</i>, an extension of the classic efficient union-find
      data structure where edges carry labels. These labels have a composition
      operation that obey the group axioms. Like union-find, the labeled version
      can efficiently compute the transitive closure of a relation, but it is not
      limited to equivalence relations; it can represent any injective
      transformation between equivalence classes, which includes two-variables per
      equality (TVPE) constraints of the form <code>y = ax + b</code>. Using
      abstract interpretation theory, we study the properties deriving from the
      use of abstract relations as labels, and the combination of labeled
      union-find with other representations of constraints, allowing both
      improvements in precision and simplification of existing constraints. Due to
      its efficiency, the labeled union-find abstractions could find many uses; we
      use it in two use cases, program analysis based on abstract interpretation
      and constraint solving for SMT, with encouraging preliminary results.
    fr: |
      Nous introduisons une nouvelle famille d’abstractions centrée autour d’une
      structure de donnée que nous appelons <i>labeled union-find</i>, une
      extension de l'union-find classique et rapide où les arêtes portent des
      labels. Ces labels sont munis d’une opération de composition et forment un
      groupe. Comme l’union-find, cette version avec labels permet de calculer
      efficacement la clôture transitive, mais elle n'est pas limitée aux
      relations d'équivalences. Elle peut représenter n’importe quelle
      transformation injective entre classes d’équivalence, ce qui inclut
      notamment les contraintes d’égalité linéaire entre deux variables de la
      forme <code>y = ax + b</code>. En utilisant la théorie d’interprétation
      abstraite, nous étudions les propriétés qui découlent de l’usage de
      relations abstraites comme labels, ainsi que la combinaison de labeled
      union-find avec d’autres représentations de contraintes, ce qui permet à la
      fois un gain en précision et une simplification de ces contraintes.
      Grâce à son efficacité, le labeled union-find pourrait avoir de nombreuses
      applications. Nous nous en servons dans deux cas : l’analyse de programme
      par interprétation abstraite et la résolution de contraintes SMT, avec des
      résultats préliminaires intéressants.


# NSAD 2024
- title: Labeled Union-Find for Constraint Factorization
  type: workshop
  slug: 2024-nsad-labeled-union-find
  authors:
    - mlemerre: Université Paris-Saclay, CEA List
    - dlesbre: Université Paris-Saclay, CEA List
  venue:
    fullname: 10th ACM SIGPLAN International Workshop on Numerical and Symbolic Abstract Domains
    acronym: NSAD
    url: https://2024.splashcon.org/home/nsad-2024
    location: Pasadena, USA
  talk-video: https://www.youtube.com/watch?v=t2uaZ6VHhAY
  talk-video-length: 28
  date:
    submitted: 2024-07-15
    accepted: 2024-08-16
    published: 2024-10-22
  keywords:
    - en: relational abstract domain
      fr: domaine abstrait relationel
    - labeled union-find
  abstract:
    en: |
      In this work-in-progress paper, we present <i>labeled union-find</i>, an
      extension of the union-find data structure where edges are annotated with
      labels that form a group algebraic structure. This structure allows to
      very efficiently represent the transitive closure of many useful binary
      relations, such as two-variables per equality (TVPE) constraints of the
      form <code>y = ax+b</code>. We characterize the properties of labeled
      union-find when used to represent binary relations between variables. More
      specifically, we study the use of this domain in a static analysis; either
      to represent binary relations, or as a reduced product with non-relational
      abstract domains with constraint propagation; as well as the design of
      efficient algorithms for the join of labeled union-find structures. We
      believe that this structure could be used as a low-cost relational domain
      or decision procedure, and that it could make other relational domains
      more efficient by removing the need to track some variables.
    fr: |
      Ce papier de travaux en cours décrit le <i>labeled union-find</i>, une
      extension de la structure d’union-find où les arêtes sont annotées par des
      labels qui forment un groupe algébrique. Cette structure permet de
      représenter efficacement la clôture transitive de nombreuses relations
      binaires utiles, telles que les relations d’égalité linéaire entre deux
      variables (TVPE) de la forme <code>y = ax+b</code>. Nous caractérisons
      les propriétés nécessaires pour utiliser le labeled union-find afin de
      représenter des relations binaires entre des variables. Plus précisément,
      nous étudions l’utilisation de ce domaine dans une analyse statique, soit
      pour représenter des relations binaires, soit comme produit réduit avec
      des domaines abstraits non-relationnels. Nous présentons aussi un
      algorithme de jointure sur cette structure de donnée. Nous pensons que
      cette structure peut-être utilisée pour représenter des domaines
      relationnels à faible cout, et qu’elle pourrait rendre d’autres domaines
      relationnels plus efficaces en retirant certaines variables.



# PLDI 2024
- title: Compiling with Abstract Interpretation
  type: conference
  slug: 2024-pldi-compiling-with-abstract-interpretation
  authors:
    - dlesbre: Université Paris-Saclay, CEA List
    - mlemerre: Université Paris-Saclay, CEA List
  venue:
    fullname: 45th ACM-SIGPLAN Symposium on Programming Language Design and Implementation
    acronym: PLDI
    url: https://pldi24.sigplan.org/
    location:
      en: Copenhagen, Denmark
      fr: Copenhague, Danemark
    attending: true
  ranking: A*
  award: null
  doi: 10.1145/3656392
  date:
    submitted: 2023-11-06
    accepted: 2024-03-01
    published: 2024-06-24
  artifact: https://zenodo.org/records/10895582
  artifact-badges:
    - acm-available
    - acm-reusable
  talk-video: https://www.youtube.com/watch?v=2Btkn9AvM8o
  talk-video-length: 18
  comment:
    fr: Aussi présenté à <span title="Journées Approches Formelles dans l'Assistance au Développement de Logiciels">AFADL 2024</span>
    en: Also presented at <span title="Journées Approches Formelles dans l'Assistance au Développement de Logiciels">AFADL 2024</span>
  keywords:
    - en: compilers
      fr: compilateurs
    - en: abstract interpretation
      fr: interprétation abstraite
    - static single assignement (SSA)
  abstract:
    en: |
      Rewriting and static analyses are mutually beneficial techniques: program
      transformations change the intensional aspects of the program, and can
      thus improve analysis precision, while some efficient transformations are
      enabled by specific knowledge of some program invariants. Despite the strong
      interaction between these techniques, they are usually considered distinct.
      In this paper, we demonstrate that we can turn abstract interpreters into
      compilers, using a simple free algebra over the standard signature of
      abstract domains. Functor domains correspond to compiler passes, for which
      soundness is translated to a proof of forward simulation, and completeness
      to backward simulation. We achieve translation to SSA using an abstract do-
      main with a non-standard SSA signature. Incorporating such an SSA
      translation to an abstract interpreter improves its precision; in particular
      we show that an SSA-based non-relational domain is always more precise than
      a standard non-relational domain for similar time and memory complexity.
      Moreover, such a domain allows recovering from precision losses that occur
      when analyzing low-level machine code instead of source code. These results
      help implement analyses or compilation passes where symbolic and semantic
      methods simultaneously refine each other, and improves precision when
      compared to doing the passes in sequence.
    fr: |
      Les réécritures et les analyses statiques sont des techniques mutuellement
      bénéfiques : d’une part, les transformations changent les aspects
      intentionnels d’un programme et peuvent donc rendre l’analyse plus précise
      ; d’autre part, la connaissance d’invariants précis peut permettre des
      transformations plus efficaces. Malgré cette forte interaction, ces
      techniques sont souvent considérées comme disjointes. Dans ce papier, nous
      montrons qu’il est possible de transformer un interprète abstrait en
      compilateur à l’aide d’un simple domaine d’algèbre libre sur la signature
      des domaines. Des foncteurs de domaines correspondent aux passes de
      compilation : leur correction implique une simulation avant tandis que
      leur complétude implique une simulation arrière. Nous transformons un
      programme en forme SSA à l’aide d’un domaine abstrait à signature
      non-standard. Nous montrons qu’une telle transformation améliore la
      précision d’un interprète abstrait. En particulier, une analyse
      non-relationnelle basée sur le SSA est toujours plus précise qu’une
      analyse classique pour un coût et temps et mémoire comparable. De plus,
      une telle analyse permet de décompiler du code machine bas niveau et
      l’analyser avec la même précision que du code source. Ces résultats permettent
      d’implémenter des analyseurs ou des compilateurs utilisant simultanément des
      méthodes symbolique et sémantique, ce qui est plus précis que de les faire
      séquentiellement.
