# Papers

# PLDI 2025
- title: Relational Abstractions Based on Labeled Union-Find
  authors: # Authors must match a key in _data/authors.yml
    - dlesbre
    - mlemerre
    - haitelhara
    - fbobot
  venue: 46th ACM-SIGPLAN Symposium on Programming Language Design and Implementation
  venue-acronym: PLDI
  ranking: A*
  award: null
  year: 2025
  month: 6
  doi: 10.1145/3729298
  artifact: https://zenodo.org/records/15165896
  bibtex: /assets/publications/bibtex/2025-pldi-relational-abstractions-labeled-uf.bib
  summary: /papers/2025-pldi-relational-abstractions-labeled-uf.html
  pdf-with-appendix: /assets/publications/pdfs/2025-pldi-relational-abstractions-labeled-uf-with-appendices.pdf
  keywords:
    - relational abstract domain
    - labeled union-find
    - abstract interpretation
  abstract: |
    We introduce a new family of abstractions based on a data structure that we
    call labeled union-find, an extension of the classic efficient union-find
    data structure where edges carry labels. These labels have a composition
    operation that obey the group axioms. Like union-find, the labeled version
    can efficiently compute the transitive closure of a relation, but it is not
    limited to equivalence relations; it can represent any injective
    transformation between equivalence classes, which includes two-variables per
    equality (TVPE) constraints of the form <code>y = ax + b</code>. Using
    abstract interpretation theory, we study the properties deriving from the
    use of abstract relations as labels, and the combination of labeled
    union-find with other representations of constraints, allowing both
    improvements in precision and simplification of existing constraints. Due to
    its efficiency, the labeled union-find abstractions could find many uses; we
    use it in two use cases, program analysis based on abstract interpretation
    and constraint solving for SMT, with encouraging preliminary results.


# NSAD 2024
- title: Labeled Union-Find for Constraint Factorization
  authors:
    - mlemerre
    - dlesbre
  venue: 10th ACM SIGPLAN International Workshop on Numerical and Symbolic Abstract Domains
  venue-acronym: NSAD
  year: 2024
  month: 10
  bibtex:
  pdf:
  talk-video: https://www.youtube.com/watch?v=t2uaZ6VHhAY
  talk-video-length: 28  # Minutes
  keywords:
    - relational abstract domain
    - labeled union-find
  abstract: |
      In this work-in-progress paper, we present labeled union-find, an
      extension of the union-find data structure where edges are annotated with
      labels that form a group algebraic structure. This structure allows to
      very efficiently represent the transitive closure of many useful binary
      relations, such as two-variables per equality (TVPE) constraints of the
      form <code>y = ax+b</code>. We characterize the properties of labeled
      union-find when used to represent binary relations between variables. More
      specifically, we study the use of this domain in a static analysis; either
      to represent binary relations, or as a reduced product with non-relational
      abstract domains with constraint propagation; as well as the design of
      efficient algorithms for the join of labeled union-find structures. We
      believe that this structure could be used as a low-cost relational domain
      or decision procedure, and that it could make other relational domains
      more efficient by removing the need to track some variables.


# PLDI 2024
- title: Compiling with Abstract Interpretation
  authors:
    - dlesbre
    - mlemerre
  venue: 45th ACM-SIGPLAN Symposium on Programming Language Design and Implementation
  venue-acronym: PLDI
  ranking: A*
  award: null
  doi: 10.1145/3656392
  year: 2024
  month: 6
  artifact: https://doi.org/10.5281/zenodo.10895582
  artifact-badges: # Must match a key in _data/badges.yml
    - acm-available
    - acm-reusable
  summary: /papers/2024-pldi-compiling-with-abstract-interpretation.html
  pdf: /assets/publications/pdfs/2024-pldi-compiling-with-abstract-interpretation.pdf
  pdf-with-appendix: /assets/publications/pdfs/2024-pldi-compiling-with-abstract-interpretation-with-appendices.pdf
  talk-slides: /assets/publications/slides/2024-pldi-compiling-with-abstract-interpretation.pdf
  talk-video: https://www.youtube.com/watch?v=2Btkn9AvM8o
  talk-video-length: 18  # Minutes
  bibtex: /assets/publications/bibtex/2024-pldi-compiling-with-abstract-interpretation.bib
  comment: Also presented at AFADL 2024
  topics:
    - compilers
    - abstract interpretation
    - static single assignement (SSA)
  abstract: |
    Rewriting and static analyses are mutually beneficial techniques: program
    transformations change the intensional aspects of the program, and can
    thus improve analysis precision, while some efficient transformations are
    enabled by specific knowledge of some program invariants. Despite the strong
    interaction between these techniques, they are usually considered distinct.
    In this paper, we demonstrate that we can turn abstract interpreters into
    compilers, using a simple free algebra over the standard signature of
    abstract domains. Functor domains correspond to compiler passes, for which
    soundness is translated to a proof of forward simulation, and completeness
    to backward simulation. We achieve translation to SSA using an abstract do-
    main with a non-standard SSA signature. Incorporating such an SSA
    translation to an abstract interpreter improves its precision; in particular
    we show that an SSA-based non-relational domain is always more precise than
    a standard non-relational domain for similar time and memory complexity.
    Moreover, such a domain allows recovering from precision losses that occur
    when analyzing low-level machine code instead of source code. These results
    help implement analyses or compilation passes where symbolic and semantic
    methods simultaneously refine each other, and improves precision when
    compared to doing the passes in sequence.
